import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'de.undercouch.download'

def DELTIX_PROXY_REPOSITORY = findProp('NEXUS_PROXY_REPOSITORY', 'https://nexus.deltixhub.com/repository/')

File devenvRootDir = new File(sourceSets.main.resources.srcDirs[0], 'devenv')
File connectorsArchiveDir = rootProject.file('build/archives')
File devenvOutput = file(findProperty('devenvDir') ?: rootProject.file('build/devenv'))
File connectorsLibDir = new File(devenvOutput, 'ember/lib/custom')

// disable jar creation
jar {
    setEnabled(false)
}

// load properties from devenv.properties
def devenvProperties = loadDevEnvProperties(devenvRootDir, devenvOutput)

// region Dev Env Tasks

tasks.register('devenvClean', Delete) {
    setDelete devenvOutput

    doLast {
        println "Delete dev env: $devenvOutput"
    }
}

tasks.register('devenvCopy', Copy) {
    dependsOn devenvClean
    from("$devenvRootDir/homes") {
        filter(ReplaceTokens, tokens: devenvProperties)
    }
    into devenvOutput
}

tasks.register('downloadEmberZip', Download) {
    dependsOn devenvCopy
    src "${DELTIX_PROXY_REPOSITORY}epm-rtc-public/QuantServer/Trade/Ember/${emberVersion}/deltix-ember-${emberVersion}.zip"
    dest new File(buildDir, "deltix-ember-${emberVersion}.zip")
    username findProp('NEXUS_USER', null) as String
    password findProp('NEXUS_PASS', null) as String
}

tasks.register('unzipEmberZip', Copy) {
    dependsOn downloadEmberZip
    from zipTree(downloadEmberZip.dest)
    into new File(devenvOutput, 'ember')
}

tasks.register('devenvPrepare', Copy) {
    dependsOn unzipEmberZip
    from zipTree("$devenvRootDir/archives/securities.zip")
    into new File(devenvOutput, '/qshome/tickdb')
}


tasks.register('devenvCleanLibCustom', Delete) {
    setDelete connectorsLibDir

    doLast {
        println "Delete custom libs: $connectorsLibDir"
    }
}

tasks.register('gatherJars', Copy) {
    from rootProject.subprojects.collect { it.tasks.withType(Jar) }
    into archivesDirectory
}

tasks.register('updateConnectors', Copy) {
    dependsOn devenvCleanLibCustom
    dependsOn gatherJars
    from "$devenvRootDir/devenv.properties"
    from connectorsArchiveDir
    into connectorsLibDir
}

// endregion

tasks.register('buildDevEnv') {
    dependsOn devenvPrepare, updateConnectors
}

// region Utilities

// resolves property value by name
String findProp(String property, String defaultValue) {
    return findProperty(property) ?: System.getenv(property) ?: defaultValue
}

// load properties from devenv.properties
def loadDevEnvProperties(def devenvResDir, def devenvOutputDir) {
    def props = new Properties()
    file("$devenvResDir/devenv.properties").withInputStream { props.load(it) }

    props.setProperty('devenvQsHome', new File(devenvOutputDir, 'qshome').absolutePath)
    props.setProperty('devenvOutput', new File(devenvOutputDir, '').absolutePath)

    // copy/override some project properties to devenv
    project.asDynamicObject.properties.each {
        if (it != null && (it.key.equals("serialNumber") || it.key.startsWith('devenv'))) {
            props.setProperty(it.key.toString(), it.value.toString())
        }
    }
    return props
}

// endregion
